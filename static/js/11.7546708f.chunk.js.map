{"version":3,"sources":["data/stats/site.js","components/Stats/Site.js","pages/Stats.js","components/Stats/TableRow.js","components/Stats/Table.js"],"names":["data","label","key","link","value","format","x","dayjs","Stats","useState","initialData","setResponseData","fetchData","useCallback","a","fetch","res","json","resData","map","field","Object","keys","includes","useEffect","Table","Main","title","description","className","id","data-testid","to","Site","TableRow","hours","minutes","seconds","href","width","defaultProps","pair"],"mappings":"oOAmDeA,EA7CF,CACX,CACEC,MAAO,sCACPC,IAAK,mBACLC,KAAM,yDAER,CACEF,MAAO,4CACPC,IAAK,oBACLC,KAAM,yDAER,CACEF,MAAO,kBACPC,IAAK,QACLC,KAAM,sDAER,CACEF,MAAO,mBACPG,MAAO,KAET,CACEH,MAAO,4BACPG,MAAO,KAET,CACEH,MAAO,qBACPC,IAAK,oBACLC,KAAM,qDAER,CACEF,MAAO,kBACPC,IAAK,YACLC,KAAM,qDACNE,OAAQ,SAACC,GAAD,OAAOC,IAAMD,GAAGD,OAAO,mBAEjC,CAIEJ,MAAO,4CACPG,MAAO,OACPD,KAAM,mECVKK,EAhCD,WAAO,IAAD,EACcC,mBAASC,GADvB,mBACXV,EADW,KACLW,EADK,KAGZC,EAAYC,sBAAW,sBAAC,8BAAAC,EAAA,sEAEVC,MAChB,wDAH0B,cAEtBC,EAFsB,gBAKNA,EAAIC,OALE,OAKtBC,EALsB,OAM5BP,EACED,EAAYS,KAAI,SAACC,GAAD,mBAAC,eACZA,GADW,IAGdhB,MAAOiB,OAAOC,KAAKJ,GAASK,SAASH,EAAMlB,KACvCgB,EAAQE,EAAMlB,KACdkB,EAAMhB,YAZc,2CAe3B,IAMH,OAJAoB,qBAAU,WACRZ,MACC,CAACA,IAGF,gCACE,4DACA,cAACa,EAAA,EAAD,CAAOzB,KAAMA,QCVJQ,UAhBD,kBACZ,cAACkB,EAAA,EAAD,CACEC,MAAM,QACNC,YAAY,2DAFd,SAIE,0BAASC,UAAU,OAAOC,GAAG,QAA7B,UACE,iCACE,qBAAKD,UAAU,QAAf,SACE,oBAAIE,cAAY,UAAhB,SAA0B,cAAC,IAAD,CAAMC,GAAG,SAAT,yBAG9B,cAACC,EAAD,W,2CCdAC,G,KAAW,SAAC,GAAD,IACf/B,EADe,EACfA,KAAME,EADS,EACTA,OAAQ8B,EADC,EACDA,MAAOC,EADN,EACMA,QAASC,EADf,EACeA,QADf,OAGf,+BACE,6BAAKlC,EAAO,mBAAGmC,KAAMnC,EAAT,SAAgBE,EAAO8B,KAAc9B,EAAO8B,KACxD,6BAAKhC,EAAO,mBAAGmC,KAAMnC,EAAT,SAAgBE,EAAO+B,KAAgB/B,EAAO+B,KAC1D,oBAAIG,MAAM,MAAV,SAAiBF,SAwBrBH,EAASM,aAAe,CACtBnC,OAAQ,SAACC,GAAD,OAAOA,GACfH,KAAM,KACNgC,MAAO,KACPC,QAAS,KACTC,QAAS,MAGIH,QCAAT,IApCD,SAAC,GAAD,IAAGzB,EAAH,EAAGA,KAAH,OACZ,gCACE,gCACGA,EAAKmB,KAAI,SAACsB,GAAD,OACR,cAAC,EAAD,CACEN,MAAOM,EAAKN,MACZC,QAASK,EAAKL,QACdC,QAASI,EAAKJ","file":"static/js/11.7546708f.chunk.js","sourcesContent":["import dayjs from 'dayjs';\n\n/* Keys match keys returned by the github api. Fields without keys are\n * mostly jokes. To see everything returned by the github api, run:\n curl https://api.github.com/repos/mldangelo/personal-site\n */\nconst data = [\n  {\n    label: 'Stars this repository has on github',\n    key: 'stargazers_count',\n    link: 'https://github.com/mldangelo/personal-site/stargazers',\n  },\n  {\n    label: 'Number of people watching this repository',\n    key: 'subscribers_count',\n    link: 'https://github.com/mldangelo/personal-site/stargazers',\n  },\n  {\n    label: 'Number of forks',\n    key: 'forks',\n    link: 'https://github.com/mldangelo/personal-site/network',\n  },\n  {\n    label: 'Number of spoons',\n    value: '0',\n  },\n  {\n    label: 'Number of linter warnings',\n    value: '0', // enforced via github workflow\n  },\n  {\n    label: 'Open github issues',\n    key: 'open_issues_count',\n    link: 'https://github.com/mldangelo/personal-site/issues',\n  },\n  {\n    label: 'Last updated at',\n    key: 'pushed_at',\n    link: 'https://github.com/mldangelo/personal-site/commits',\n    format: (x) => dayjs(x).format('MMMM DD, YYYY'),\n  },\n  {\n    // TODO update this with a pre-commit hook\n    /* find . | grep \".js\" | grep -vE \".min.js|node_modules|.git|.json\" |\n    xargs -I file cat file | wc -l */\n    label: 'Lines of Javascript powering this website',\n    value: '2115',\n    link: 'https://github.com/mldangelo/personal-site/graphs/contributors',\n  },\n];\n\nexport default data;\n","import React, { useState, useCallback, useEffect } from 'react';\n\nimport Table from './Table';\nimport initialData from '../../data/stats/site';\n\nconst Stats = () => {\n  const [data, setResponseData] = useState(initialData);\n  // TODO think about persisting this somewhere\n  const fetchData = useCallback(async () => {\n    // request must be authenticated if private\n    const res = await fetch(\n      'https://api.github.com/repos/mldangelo/personal-site',\n    );\n    const resData = await res.json();\n    setResponseData(\n      initialData.map((field) => ({\n        ...field,\n        // update value if value was returned by call to github\n        value: Object.keys(resData).includes(field.key)\n          ? resData[field.key]\n          : field.value,\n      })),\n    );\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <div>\n      <h3>Some stats about this site</h3>\n      <Table data={data} />\n    </div>\n  );\n};\n\nexport default Stats;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport Site from '../components/Stats/Site';\n\nconst Stats = () => (\n  <Main\n    title=\"Stats\"\n    description=\"Some statistics about Michael D'Angelo and mldangelo.com\"\n  >\n    <article className=\"post\" id=\"stats\">\n      <header>\n        <div className=\"title\">\n          <h2 data-testid=\"heading\"><Link to=\"/stats\">Stats</Link></h2>\n        </div>\n      </header>\n      <Site />\n    </article>\n  </Main>\n);\n\nexport default Stats;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableRow = ({\n  link, format, hours, minutes, seconds,\n}) => (\n  <tr>\n    <td>{link ? <a href={link}>{format(hours)}</a> : format(hours)}</td>\n    <td>{link ? <a href={link}>{format(minutes)}</a> : format(minutes)}</td>\n    <td width=\"50%\">{seconds}</td>\n  </tr>\n);\n\nTableRow.propTypes = {\n  format: PropTypes.func,\n  link: PropTypes.string,\n  hours: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  minutes: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  seconds: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n};\n\nTableRow.defaultProps = {\n  format: (x) => x,\n  link: null,\n  hours: null,\n  minutes: null,\n  seconds: null,\n};\n\nexport default TableRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TableRow from './TableRow';\n\nconst Table = ({ data }) => (\n  <table>\n    <tbody>\n      {data.map((pair) => (\n        <TableRow\n          hours={pair.hours}\n          minutes={pair.minutes}\n          seconds={pair.seconds}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n\nTable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    format: PropTypes.func,\n    link: PropTypes.string,\n    hours: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n    minutes: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n    seconds: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  })).isRequired,\n};\n\nexport default Table;\n"],"sourceRoot":""}